#1.Display all customers who live in 'Delhi'.

SELECT 
    *
FROM
    customers
WHERE
    city = 'Delhi';

#2.Find the average rating of all restaurants in 'Mumbai'.

SELECT 
    ROUND(AVG(COALESCE(rating, 0)), 2) AS average_rating
FROM
    restaurants
WHERE
    city = 'Mumbai';

#3.List all customers who have placed at least one order.

SELECT 
    customers.customer_id,
    customers.name AS full_name,
    COUNT(orders.order_id) AS total_orders
FROM
    customers
        INNER JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY 1 , 2;


#4.Display the total number of orders placed by each customer.

SELECT 
    customers.customer_id,
    customers.name AS full_name,
    COUNT(orders.order_id) AS total_orders
FROM
    customers
        LEFT JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY 1 , 2;


#5.Find the total revenue generated by each restaurant.

SELECT 
    restaurants.restaurant_id,
    restaurants.name,
    COALESCE(SUM(orders.total_amount), 0) AS total_revenue
FROM
    restaurants
        LEFT JOIN
    orders ON orders.restaurant_id = restaurants.restaurant_id
GROUP BY 1 , 2;



#6.List top 5 restaurants by average customer rating, including ties.

WITH restaurant_avg_ratings AS (
    SELECT 
        RESTAURANTS.restaurant_id, RESTAURANTS.name,
        ROUND(AVG(FEEDBACK.rating), 2) AS average_customer_rating
    FROM RESTAURANTS INNER JOIN ORDERS 
        ON RESTAURANTS.restaurant_id = ORDERS.restaurant_id
    INNER JOIN FEEDBACK 
        ON ORDERS.order_id = FEEDBACK.order_id
    GROUP BY 1, 2),

top_rated_restaurants AS (
    SELECT *,
           DENSE_RANK() OVER (ORDER BY average_customer_rating DESC) AS rating_rank
    FROM restaurant_avg_ratings)

SELECT * FROM top_rated_restaurants WHERE rating_rank <= 5;

    
    
#7. Display all customers who have never placed an order.

SELECT 
    customers.customer_id,
    customers.name AS full_name,
    COUNT(orders.order_id) AS total_orders
FROM
    customers
        LEFT JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY 1 , 2
HAVING total_orders = 0;

#another way:

SELECT 
    *
FROM
    customers
WHERE
    customer_id NOT IN (SELECT 
            customer_id
        FROM
            orders);




#8. Find the number of orders placed by each customer in 'Mumbai'.
#i.e Orders per Customer in Mumbai (including zero orders)

SELECT 
    customers.customer_id,
    customers.name AS full_name,
    customers.city,
    COUNT(orders.order_id) AS order_count
FROM
    customers
        LEFT JOIN
    orders ON customers.customer_id = orders.customer_id
WHERE
    customers.city = 'Mumbai'
GROUP BY 1 , 2 , 3;



#9. Display all orders placed in the last 10 days.

SELECT 
    *
FROM
    orders
WHERE
    order_date BETWEEN '2024-08-01' AND '2024-08-10';



#10. List all delivery partners who have completed more than 1 delivery

SELECT 
    deliverypartners.partner_id,
    deliverypartners.name AS full_name,
    orders.status,
    COUNT(orders.order_id) AS delivery_count
FROM
    deliverypartners
        INNER JOIN
    orderdelivery ON deliverypartners.partner_id = orderdelivery.partner_id
        INNER JOIN
    orders ON orders.order_id = orderdelivery.order_id
WHERE
    orders.status = 'completed'
GROUP BY 1 , 2 , 3
HAVING delivery_count > 1;

#11. Find the customers who have placed orders on exactly three different days.

SELECT 
    customers.customer_id,
    name AS full_name,
    COUNT(DISTINCT DATE(order_date)) AS unique_order_days
FROM
    orders
        INNER JOIN
    customers ON orders.customer_id = customers.customer_id
GROUP BY 1 , 2
HAVING unique_order_days = 3;


#12. Find the delivery partner who has worked with the most different customers.

SELECT 
    deliverypartners.partner_id,
    deliverypartners.name AS full_name,
    COUNT(DISTINCT orders.customer_id) AS unique_customers
FROM
    deliverypartners
        INNER JOIN
    orderdelivery ON deliverypartners.partner_id = orderdelivery.partner_id
        INNER JOIN
    orders ON orders.order_id = orderdelivery.order_id
GROUP BY 1 , 2
ORDER BY unique_customers DESC
LIMIT 1;


#13. Identify customers who have the same city and have placed orders 
#    at the same restaurants, but on different dates.

SELECT 
    c1.customer_id AS c1_id, c2.customer_id AS c2_id,
    c1.name AS c1_full_name, c2.name AS c2_full_name,
    c1.city, o1.restaurant_id, o1.order_date AS c1_order_date,
    o2.order_date AS c2_order_date
FROM
    customers c1 JOIN customers c2
    ON c1.city = c2.city
        AND c1.customer_id < c2.customer_id
        JOIN orders o1 
	ON o1.customer_id = c1.customer_id
        JOIN orders o2 
	ON o2.customer_id = c2.customer_id
        AND o1.restaurant_id = o2.restaurant_id
        AND DATE(o1.order_date) <> DATE(o2.order_date);
        
        













    
      

